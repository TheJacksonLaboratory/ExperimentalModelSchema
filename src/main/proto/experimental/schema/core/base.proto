syntax = "proto3";

package org.experimental.schema.core;

option java_multiple_files = true;
option java_package = "org.experimental.schema.core";


// A class (aka term, concept) in an ontology.
// FHIR mapping: CodeableConcept (http://www.hl7.org/fhir/datatypes.html#CodeableConcept)
//   see also Coding (http://www.hl7.org/fhir/datatypes.html#Coding)
message OntologyClass {
  // a CURIE-style identifier e.g. HP:0100024, MP:0001284, UBERON:0001690.
  // This is the primary key for the ontology class
  // REQUIRED!
  string id = 1;

  // class label, aka name. E.g. "Abnormality of cardiovascular system"
  string label = 2;
}
// TODO: PH - I would not write so many comments here. The code should be clear. Better to write stuff like that in the ReadTheDocs documentation.


// FHIR mapping: Reference (https://www.hl7.org/fhir/references.html)
message ExternalReference {
  // e.g. ISBN, PMID:123456, DOI:...,
  // FHIR mapping: Reference.identifier
  string id = 1;
  // A full or partial URL pointing to the external reference if no commonly resolvable identifier can be used in the
  // `id` field
  // FHIR mapping Reference.reference
  // TODO: PH - If this is an URL, why don't we call it 'url' but 'reference'?
  string reference = 2;
  // Human readable title or display string for the reference
  // FHIR mapping: Reference.display
  string description = 3;
}
// TODO: PH - We could use this element in the new Individual/source element. Or even a list of such elements.
// TODO: PH - Too many comments!

// FHIR mapping: Condition.evidence (https://www.hl7.org/fhir/condition-definitions.html#Condition.evidence)
message Evidence {
  // The encoded evidence type using, for example the Evidence & Conclusion Ontology (ECO - http://purl.obolibrary.org/obo/eco.owl)
  // FHIR mapping: Condition.evidence.code
  OntologyClass evidence_code = 1;
  // FHIR mapping: Condition.evidence.detail
  ExternalReference reference = 2;
}
// TODO: PH - Too many comments!


// A clinical procedure performed on a subject. By preference a single concept to indicate both the procedure and the
// body site should be used. In cases where this is not possible, the body site should be indicated using a separate
// ontology class.
// e.g.
// {"code":{"NCIT:C51585": "Biopsy of Soft Palate"}}
// {"code":{"NCIT:C28743": "Punch Biopsy"}, "body_site":{"UBERON:0003403": "skin of forearm"}} - a punch biopsy of the skin from the forearm
// FHIR mapping: Procedure (https://www.hl7.org/fhir/procedure.html)
message Procedure {
  // FHIR mapping: Procedure.code
  OntologyClass code = 1;

  // FHIR mapping: Procedure.bodySite
  OntologyClass body_site = 2;

    AgeElement age_performed = 3;
}
// TODO: PH - I would put this in the proto file for the new treatment element
// TODO: PH - Too many comments!



// TODO  -- What is the standard way of representing Age for mouse models?
message Age {
  int32 years = 1;
  int32 weeks = 2;
  int32 days = 3;
}
// TODO: PH - I would stick with the traditional iso8601duration string. It's simpler, human-readable, and you can use it to specify the age as accurately as you like.

message AgeRange {
  Age start = 1;
  Age end = 2;
}


message AgeElement {
  oneof element {
    OntologyClass development_stage = 1;
    Age age = 2;
    AgeRange age_range = 3;
   // TimeStamp timestamp = 3;
  }
}
// TODO: PH - What is that? What is that good for? Nothing is written about this in the documentation.

message File {
  // URI for the file e.g. file://data/genomes/file1.vcf.gz or https://opensnp.org/data/60.23andme-exome-vcf.231?1341012444
  string uri = 1;

  // A map of identifiers mapping an individual to a sample in the file. The key values must correspond to the
  // Individual::id for the individuals in the message, the values must map to the samples in the file.
  map<string, string> individual_to_file_identifiers = 2;

  // Map of attributes describing the file. For example the File format or genome assembly would be defied here. For
  // genomic data files there MUST be a 'genomeAssembly' key.
  map<string, string> file_attributes = 3;
}


// Sex of an individual
enum Sex {
  // Not assessed / available.
  UNKNOWN_SEX = 0;
  // Female
  FEMALE = 1;
  // Male
  MALE = 2;
  // It is not possible, to accurately assess the applicability of MALE/FEMALE.
  OTHER_SEX = 3;
}