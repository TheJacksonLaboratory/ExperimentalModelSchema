{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the documentation for the experimental-model-schema!","text":"<p>The Experimental Model Schema (EMS) is a semantic framework for modeling the phenotypic data of model organism experimental data. The EMS comprises information about the experimental conditions, genetic modifications of the model, phenotypic observations and measurements. The EMS is designed to be compatible with the GA4GH Phenopacket Schema.</p> <p>A goal of the EMS is to represent experimental outcomes across the entirety of the Mouse Phenome Database (MPD) and to represent both individuals or experimental cohorts. The EMS is designed to be flexible enough to represent experimental model data of other species.</p>"},{"location":"#nomenclature","title":"Nomenclature","text":"<p>We refer to the model as the Experimental Model Schema. We refer to each instance of the EMS used to describe an experiment as a model packet (lower case).</p> <p>The schema as well as source code in Java, C++, and Python is available from the experimental-model-schema GitHub repository.</p>"},{"location":"building-blocks/","title":"EMS building blocks","text":"<p>The EMS standard consists of several protobuf messages each of which contains information about a certain topic such as phenotype, variant, pedigree, and so on.  One message can contain other messages, which allows a rich representation of data.  For instance, the Phenopacket message contains messages of type Individual, PhenotypicFeature, Biosample, and so on. Individual messages can therefore be regarded as building blocks that are combined to create larger structures. It would also be straightforward to include the Phenopackets schema into larger schema for particular use cases. Follow the links to read more information about individual building blocks.</p> <ul> <li>age</li> <li>animal</li> <li>animal_identifier</li> <li>animal_origin</li> <li>cohort_measurement</li> <li>experimental_cohort</li> <li>experimental_measurement</li> <li>metadata</li> <li>model_genotype</li> <li>ontologyclass</li> <li>project</li> <li>protocol</li> <li>researcher</li> <li>strain</li> <li>study</li> </ul>"},{"location":"introduction/","title":"Introduction to the Experimental Model Schema","text":"<p>Model organisms offer the opportunity to perform system-level investigations of the effects of genetic variants, environmental exposures, or candidate therapeutic strategies on physiological and pathophysiological -omics networks in multiple tissues in a way that would be impossible in human studies (Lloyd et al., 2016). Deep modeling of model organism resources, for many of which multi-omics and experimental interventional data are available will allow us to simultaneously model phenotypic, variation, and genomic functional (RNA-seq, scRNA, ATAC-seq, etc.) data.</p> <p>The main goal of the Experimental Model Schema is to create a semantic framework for modeling the experimental data (genetics, genomics, experimental paramenters, phenotypic features, measurements) for experiments on model organisms in a way that will be compatible with the Global Alliance for Genomics and Health (GA4GH) Phenopacket Schema.</p>"},{"location":"developers/developers/","title":"For developers","text":"<ul> <li>documentation</li> </ul>"},{"location":"developers/documentation/","title":"Documentation","text":"<p>EMS documentation is done using mkdocs. To edit the documentation, first create a virtual environment and install the required packages.</p> <pre><code>python3 -m venv ems_venv\nsource bin ems_venv/bin/activate\npip install --upgrade pip\npip install mkdocs\npip install mkdocs-material\npip install mkdocs-material[imaging]\npip install mkdocs-material-extensions\npip install pillow cairosvg\npip install mkdocstrings[python]\n</code></pre> <p>then start a local server with <pre><code>mkdocs serve\n</code></pre></p>"},{"location":"ems/age/","title":"Age","text":"<p>TODO -- discuss what the appropriate way is to represent the age of mouse models. For a lot of human data, we have used  ISO8601 duration or time intervals ( e.g. P40Y10M05D), but this may not be what we want here. I am making the following suggestions</p>"},{"location":"ems/age/#data-model","title":"Data model","text":"Field Type Multiplicity Description years int32 1..1 Number of years. REQUIRED (may be zero). weeks int32 1..1 Number of weeks. REQUIRED (may be zero). days int32 1..1 Number of days. REQUIRED (may be zero)."},{"location":"ems/age/#agerange","title":"AgeRange","text":"<p>Some of the age data is provided as ranges, e.g.,  \"ageweeks\": \"7-9wks\"</p>"},{"location":"ems/age/#data-model_1","title":"Data model","text":"Field Type Multiplicity Description start Age 1..1 An Age message end Age 1..1 An Age message"},{"location":"ems/age/#example","title":"Example","text":"<p>For instance, to represent the \"7-9wks\", one could use an AgeRange object as follows..</p> <pre><code>ageRange:\n  start:\n      years: 0\n      weeks: 7\n      days: 0\n  end:\n      years: 0\n      weeks: 9\n      days: 0\n</code></pre>"},{"location":"ems/animal/","title":"Animal","text":"<p>Individual experimental animals are represented by the Animal element of the Experimental Model Schema. This element intends to represent an individual model organism used in an experiment. Note that some experiment packets will refer to a cohort of individual models used for an experiment instead of an individual (See :ref:<code>rstexperimentalcohort</code>).</p>"},{"location":"ems/animal/#data-model","title":"Data model","text":"Field Type Multiplicity Description id string 1..1 An arbitrary identifier. REQUIRED. animal_identification_method_list repeated AnimalIdentifier animal_identification_method_list 0..* Methods used to identify this mouse in the experiment sex Sex 1..1 Sex of the model organism taxonomy OntologyClass 1..1 an :ref:<code>rstontologyclass</code> representing the species (e.g., NCBITaxon:10090 for Mus musculus) strain Strain 0..1 an :ref:<code>rststrain</code> representing the strain animalOrigin AnimalOrigin 0..1 a  :ref:<code>rstanimal_origin</code>  representing the provence of the animal"},{"location":"ems/animal/#example","title":"Example","text":"<p>The following example represents a single male C57BL/A mouse with an ear punch with the value \"90\".</p> <pre><code>{\n\"animalIdentificationMethodList\": [{\n    \"id\": \"arbitrary.id\",\n    \"identifier\": {\n        \"id\": \"MGI:1234567\",\n        \"label\": \"ear punch\"\n    },\n    \"identifierValue\": \"90\"\n}],\n    \"sex\": \"MALE\",\n\"taxonomy\": {\n    \"id\": \"NCBITaxon:10090\",\n    \"label\": \"Mus musculus\"\n},\n\"strain\": {\n    \"strainType\": {\n        \"id\": \"MGI:2670463\",\n        \"label\": \"C57BL/A\"\n    },\n    \"strainAttribute\": [\"INBRED_STRAIN\"]\n},\n\"animalOrigin\": {\n    \"vendor\": \"anonynmous_vendor\",\n    \"externalIdentifier\": \"arbitrary.external.id\",\n    \"originIdentifierList\": [{\n        \"idType\": \"jr_number\",\n        \"idValue\": \"424242\"\n            }]\n    }\n}\n</code></pre>"},{"location":"ems/animal/#explanations","title":"Explanations","text":"<ul> <li>animal_id</li> </ul> <p>This element is the primary identifier for the individual animal and MUST be used in other parts of a message when referring to this individual. There are no further constraints on the identifier, which is application-specific.</p> <ul> <li>animal_project_id</li> </ul> <p>TODO -- DOES THIS REFER TO THE EXPERIMENT -- PROVIDE DEFINITION HERE</p> <ul> <li>project_symbol</li> </ul> <p>TODO -- WHY IS THIS NEEDED IN ADDITION TO THE animal_project_id?</p> <ul> <li>sex</li> </ul> <p>An enumeration to denote the phenotypic sex of the individual animal. See :ref:<code>rstsex</code>.</p> <ul> <li>stock_number</li> </ul> <p>WHAT IS THIS FOR AND DOES IT BELONG IN THE SCHEMA?</p> <ul> <li>taxonomy</li> </ul> <p>The taxonomy identifier of the species of the the animal MUST be provided at its most specific level. We advise using the codes from the NCBI Taxonomy resource. For instance, NCBITaxon:10090 is mouse (Mus musculus) and  or NCBITaxon:9615 is dog.</p> <ul> <li>strain</li> </ul> <p>TODO -- Decide how to represent this</p> <ul> <li>strain_identifier</li> </ul> <p>TODO -- Decide how to represent this</p>"},{"location":"ems/animal_identifier/","title":"Animal Identifier","text":"<p>This element specifies identifiers used to track animals in cages or tanks etc. This page provides an <code>introduction &lt;https://www.jax.org/news-and-insights/2006/December/animal-identification-systems-used-for-mice&gt;</code>_. TODO -- better introduction.</p>"},{"location":"ems/animal_identifier/#data-model","title":"Data model","text":"Field Type Multiplicity Description id string 0..1 arbitrary identifier. OPTIONAL (or should this be required?). OntologyClass identifier 1..1 ontology term that describes the type of identifier such as ear punch or tattoo. REQUIRED identifier_value string 1..1 the value of the identifier. REQUIRED <p>The AnimalIdentification message is designed to be a component of the animal message.</p>"},{"location":"ems/animal_identifier/#example","title":"Example","text":"<p>Note that currently, we do not have an Ontology to refer to things such as ear punch or tattoo. It seems that it would be useful to define a small ontology with these items, or to at least create MGI identifiers, since we do not want to use strings for this (too easy to make a mistake), but an enumeration would inevitably not contain all of the items that we will want to have. Therefore, for the purposes of this example, we have made up <code>fake</code> MGI terms to denote ear punch etc.</p> <pre><code>{\n  \"id\": \"arbitrary.id\",\n  \"identifier\": {\n    \"id\": \"MGI:1234567\",\n    \"label\": \"ear punch\"\n  },\n  \"identifierValue\": \"90\"\n}\n</code></pre>"},{"location":"ems/animal_identifier/#things-to-discuss","title":"Things to discuss","text":"<ul> <li>Do we want to use an ontology to denote concepts such as Ear Punch?</li> <li>Is there a controlled vocabulary for the values, e.g., this <code>example &lt;https://research.charlotte.edu/sites/research.charlotte.edu/files/media/files/iacuc/policies/Rodent-genotyping-SOP.pdf&gt;</code>_ for each punch?</li> <li>Do we require any additional information?</li> </ul>"},{"location":"ems/animal_origin/","title":"Animal Origin","text":"<p>These elements specify the source of an animal (vendor).</p> <p>The AnimalOrigin message is designed to be a component of the animal message.</p>"},{"location":"ems/animal_origin/#data-model","title":"Data model","text":"<p>Two messages are used. The animal origin identifier represents institution-specific identifier codes, such as the JR number at JAX. TODO -- explain this better! TODO -- this is extremely prelimiary and only intended to start discussions!</p> Field Type Multiplicity Description id_type string 1..1 arbitrary identifier. REQUIRED id_value string 1..1 the value of the identifier. REQUIRED <p>The AnimalOrigin message has a list of AnimalOriginIdentifiers and also specifies the vender and an external identifier of the vendor.</p> <p>| Field | Type | Multiplicity |  Description | | ivendor | i string| i 1..1| i arbitrary identifier. REQUIRED| i | external_identifier|  string |  1..1|  the value of the identifier. REQUIRED| | origin_identifier_list |  repeated AnimalOriginIdentifier |  0..*, OPTIONAL|</p>"},{"location":"ems/animal_origin/#example","title":"Example","text":"<p>Here is a simple example to get discussions started... What about stock number?</p> <pre><code>{\n  \"vendor\": \"anonynmous_vendor\",\n  \"externalIdentifier\": \"arbitrary.external.id\",\n  \"originIdentifierList\": [{\n    \"idType\": \"jr_number\",\n    \"idValue\": \"424242\"\n  }]\n}\n</code></pre>"},{"location":"ems/cohort_measurement/","title":"CohortMeasurement","text":"<p>Some of our data is available as the aggregate measurements for a group of experimental animals. An example is shown below. The implicit assumption is that the measurements are normally distributed TODO decide if the EMS should commit to the assumption of Normality.</p> <pre><code>\"strainmeans\": [\n    {\n      \"cv\": 0.1963,\n      \"maxval\": 3119.0,\n      \"mean\": 2502.0,\n      \"measnum\": 89013,\n      \"minval\": 1782.0,\n      \"nmice\": 8,\n      \"sd\": 491.1,\n      \"sem\": 173.6,\n      \"sex\": \"f\",\n      \"strain\": \"CC002/UncJ\",\n      \"strainid\": 1502,\n      \"varname\": \"distance_total_OF\",\n      \"zscore\": -0.36\n    },\n    {\n      \"cv\": 0.1071,\n      \"maxval\": 4936.0,\n      \"mean\": 4195.0,\n      \"measnum\": 89013,\n      \"minval\": 3821.0,\n      \"nmice\": 5,\n      \"sd\": 449.1,\n      \"sem\": 200.8,\n      \"sex\": \"f\",\n      \"strain\": \"CC003/UncJ\",\n      \"strainid\": 1503,\n      \"varname\": \"distance_total_OF\",\n      \"zscore\": 0.62\n    },\n</code></pre> <p>Initial mapping</p> <pre><code>message CohortMeasurement {\n  string id = 1;\n  int32 number_of_animals = 2;\n  OntologyClass strain = 3;\n  OntologyClass assay = 4;\n  Sex sex = 5;\n  double mean = 6;\n  double minimum_value = 7;\n  double maximum_value = 8;\n  double standard_deviation = 9;\n  double standard_error_of_mean = 10;\n  double zscore = 11;\n}\n</code></pre>"},{"location":"ems/experimental_cohort/","title":"Experimental Cohort","text":"<p>This element should be used if we have data about a cohort of individuals but do not have data on each individual model.</p>"},{"location":"ems/experimental_cohort/#explanations","title":"Explanations","text":"<ul> <li>id</li> </ul> <p>A unique identified for the cohort, which MUST be used when refering to the cohort in other sections of the experiment packet.</p> <p>TO-DO</p>"},{"location":"ems/experimental_cohort/#_1","title":"Experimental cohort","text":"<p>Discuss other elements that might be required here</p>"},{"location":"ems/experimental_measurement/","title":"Experimental Measurement","text":"<p>The subject of the Experimental Model Schema is represented by an Individual element. This element intends to represent an individual model organism used in an experiment. Note that some experiment packets will refer to a cohort of individual models used for an experiment instead of an individual (See :ref:<code>rstexperimentalcohort</code>).</p> <p>Probably we want to model this on the ro-crate JSON-LD model, therefore I am not trying to fill out details here</p>"},{"location":"ems/experimental_measurement/#suggestion","title":"Suggestion","text":"<p>The data that is current in MPD looks like this</p> <p>.. code-block:: console</p> <pre><code>\"animaldata\": [\n{\n  \"animal_id\": \"F148-1-dob2015-01-09\",\n  \"animal_projid\": 519,\n  \"measnum\": 89013,\n  \"projsym\": \"JaxCC1\",\n  \"sex\": \"f\",\n  \"stocknum\": \"021236\",\n  \"strain\": \"CC002/UncJ\",\n  \"strainid\": 1502,\n  \"value\": 2117.0,\n  \"varname\": \"distance_total_OF\",\n  \"zscore\": -0.78\n},\n{\n  \"animal_id\": \"F148-2-dob2015-01-09\",\n  \"animal_projid\": 519,\n  \"measnum\": 89013,\n  \"projsym\": \"JaxCC1\",\n  \"sex\": \"f\",\n  \"stocknum\": \"021236\",\n  \"strain\": \"CC002/UncJ\",\n  \"strainid\": 1502,\n  \"value\": 2887.0,\n  \"varname\": \"distance_total_OF\",\n  \"zscore\": 0.78\n}, ....\n</code></pre> <p>and like this</p> <p>.. code-block:: console</p> <pre><code>measures_info\": [\n    {\n      \"ageweeks\": \"7-9wks\",\n      \"association\": null,\n      \"datatype\": null,\n      \"descrip\": \"total distance traveled, 20 min test\",\n      \"descrip2\": null,\n      \"extname\": \"distance_traveled_total\",\n      \"file_column\": null,\n      \"granularity\": \"animal\",\n      \"intervention\": null,\n      \"is_baseline\": false,\n      \"is_control\": false,\n      \"is_covar\": null,\n      \"is_measure\": true,\n      \"keymeasnum\": 89013,\n      \"label\": null,\n      \"listorder\": 9013,\n      \"magnitude\": null,\n      \"measnum\": 89013,\n      \"method\": \"open field test\",\n      \"mpdsector\": \"css\",\n      \"native_method\": \"open field\",\n      \"nstrainstested\": 18,\n      \"paneldesc\": \"CC\",\n      \"private\": null,\n      \"projsym\": \"JaxCC1\",\n      \"projyear\": \"2018\",\n      \"reference\": null,\n      \"seriestype\": null,\n      \"sextested\": \"both\",\n      \"sourceparm\": \"jaxcc_oft\",\n      \"supplemental\": null,\n      \"units\": \"cm\",\n      \"upload_factors\": null,\n      \"varname\": \"distance_total_OF\"\n    }\n  ]\n</code></pre> <p>It seems to me that this is mixing information about the experiment itself with information about the measurement and other items. We would want to \"normalize\" this in database parlance. It seems to me it would be a good idea to create an ontology to represent information about the types of experiments we perform at JAX under the assumption that these experimental designs are stable with time.</p> <p>We have here an Open Field Test: The Open Field task is a simple sensorimotor test used to determine general activity levels, gross locomotor activity, and exploration habits in rodent models.</p> <p>We could represent this as follows</p> <p>.. code-block:: console</p> <pre><code>id: MEO:0000001\nlabel: open-field test total distance traveled\n\nid: MEO:0000002\nlabel: open-field test total distance traveled in 10 minutes\nis_a: MEO:0000001 ! open-field test total distance traveled\n\nid: MEO:0000002\nlabel: open-field test total distance traveled in 20 minutes\nis_a: MEO:0000001 ! open-field test total distance traveled\n</code></pre> <p>Then, we would refer to this term instead of the  descrip, descrip2, extname, measnum, and method fields (and possibly some of the other fields) in the EMS.</p> <p>In bioconnect, I am seeing things like this -- JAXAS000001 longitudinal mass measurement assay, but it is unclear where to get info about JAXAS000001 -- is this intended to be a controlled terminology or ontology?</p>"},{"location":"ems/experimental_measurement/#data-model","title":"Data model","text":"<p>| Field | Type | Multiplicity |  Description | |id | string |1..1|An arbitrary identifier for this specific measurement. REQUIRED| |assay | OntologyClass | 1..1 |The experiment performed to obtain the measurement| |age |AgeElement| 0..1|The age at which the experiment was performend. RECOMMENDED|</p>"},{"location":"ems/experimental_measurement/#example","title":"Example","text":"<p>The following example is typical but does not make use of all of the optional fields of this element.</p> <p>.. code-block:: yaml</p> <p>todo:     id: \"todo\"</p>"},{"location":"ems/experimental_measurement/#explanations","title":"Explanations","text":"<p>todo</p>"},{"location":"ems/experimental_model/","title":"ExperimentalModel","text":"<p>This element captures all the data about an individual animal model or about cohorts that are represented as single observations, as is the case for many of the models in MPO. The following example was generated with the current model using the ExperimentalModelTest.java class.</p> <p>.. code-block:: console</p> <pre><code>{\n  \"id\": \"where do we get this model id?\",\n  \"animal\": {\n    \"taxonomy\": {\n      \"id\": \"NCBITaxon:10090\",\n      \"label\": \"Mus musculus\"\n    },\n    \"strain\": \"B6.Cg-Tg(Myh6-Nox4)1Ams\",\n    \"strainIdentifier\": \"MGI:4839003\"\n  },\n  \"study\": {\n    \"id\": \"study.ID\"\n  },\n  \"phenotypicFeatureList\": [{\n    \"type\": {\n      \"id\": \"MP:0001544\",\n      \"label\": \"abnormal cardiovascular system physiology\"\n    },\n    \"evidence\": [{\n      \"evidenceCode\": {\n        \"id\": \"ECO:0000033\",\n        \"label\": \"author statement supported by traceable reference\"\n      },\n      \"reference\": {\n        \"id\": \"PMID:20921387\",\n        \"reference\": \"https://pubmed.ncbi.nlm.nih.gov/20921387/\",\n        \"description\": \"NADPH oxidase-4 mediates protection against chronic load-induced stress in mouse hearts by enhancing angiogenesis\"\n      }\n    }]\n  }, {\n    \"type\": {\n      \"id\": \"MP:0002833\",\n      \"label\": \"increased heart weight\"\n    },\n    \"evidence\": [{\n      \"evidenceCode\": {\n        \"id\": \"ECO:0000033\",\n        \"label\": \"author statement supported by traceable reference\"\n      },\n      \"reference\": {\n        \"id\": \"PMID:20921387\",\n        \"reference\": \"https://pubmed.ncbi.nlm.nih.gov/20921387/\",\n        \"description\": \"NADPH oxidase-4 mediates protection against chronic load-induced stress in mouse hearts by enhancing angiogenesis\"\n      }\n    }]\n  }, {\n    \"type\": {\n      \"id\": \"MP:0003915\",\n      \"label\": \"increased left ventricle weight\"\n    },\n    \"evidence\": [{\n      \"evidenceCode\": {\n        \"id\": \"ECO:0000033\",\n        \"label\": \"author statement supported by traceable reference\"\n      },\n      \"reference\": {\n        \"id\": \"PMID:20921387\",\n        \"reference\": \"https://pubmed.ncbi.nlm.nih.gov/20921387/\",\n        \"description\": \"NADPH oxidase-4 mediates protection against chronic load-induced stress in mouse hearts by enhancing angiogenesis\"\n      }\n    }]\n  }, {\n    \"type\": {\n      \"id\": \"MP:0004486\",\n      \"label\": \"decreased response of heart to induced stress\"\n    },\n    \"evidence\": [{\n      \"evidenceCode\": {\n        \"id\": \"ECO:0000033\",\n        \"label\": \"author statement supported by traceable reference\"\n      },\n      \"reference\": {\n        \"id\": \"PMID:20921387\",\n        \"reference\": \"https://pubmed.ncbi.nlm.nih.gov/20921387/\",\n        \"description\": \"NADPH oxidase-4 mediates protection against chronic load-induced stress in mouse hearts by enhancing angiogenesis\"\n      }\n    }]\n  }, {\n    \"type\": {\n      \"id\": \"MP:0010724\",\n      \"label\": \"thick interventricular septum\"\n    },\n    \"evidence\": [{\n      \"evidenceCode\": {\n        \"id\": \"ECO:0000033\",\n        \"label\": \"author statement supported by traceable reference\"\n      },\n      \"reference\": {\n        \"id\": \"PMID:20921387\",\n        \"reference\": \"https://pubmed.ncbi.nlm.nih.gov/20921387/\",\n        \"description\": \"NADPH oxidase-4 mediates protection against chronic load-induced stress in mouse hearts by enhancing angiogenesis\"\n      }\n    }]\n  }],\n  \"genotypeList\": [{\n    \"genotypeId\": \"MGI:4838552\",\n    \"gene\": {\n      \"id\": \"MGI:1354184\",\n      \"label\": \"Nox4\"\n    },\n    \"genotypedescription\": \"Tg(Myh6-Nox4)1Ams\",\n    \"genotypesymbol\": \"Tg(Myh6-Nox4)1Ams/0\"\n  }]\n}\n</code></pre>"},{"location":"ems/metadata/","title":"MetaData","text":"<p>This element contains structured definitions of the resources and ontologies used within the phenopacket. It is considered to be a required element of a valid Phenopacket and application Q/C software should check this.</p>"},{"location":"ems/metadata/#data-model","title":"Data model","text":"Field Type Multiplicity Description created A Timestamp 1..1 Representation of the time when this object was created, e.g., 2019-04-01T15:10:17.808Z created_by string 1..1 Name of person who created the phenopacket submitted_by string 0..1 Name of person who submitted the phenopacket resources list of :ref:<code>rstresource</code> 1..* Ontologies used to create the phenopacket updates list of :ref:<code>rstupdate</code> 0..* List of updates to the phenopacket phenopacket_schema_version string 1..1 schema version of the current phenopacket external_references List of :ref:<code>rstexternalreference</code> 0..* (See text) <p>The <code>MetaData</code> element MUST have one :ref:<code>rstresource</code> element for each ontology or terminology whose terms are used in the Phenopacket. For instance, if a MONDO term is used to specify the disease and HPO terms are used to specify the phenotypes of a patient, then the <code>MetaData</code> element MUST have one <code>Resource</code> element each for MONDO and HPO.</p>"},{"location":"ems/metadata/#example","title":"Example","text":"<pre><code>metadata:\n  created: \"2019-07-21T00:25:54.662Z\"\n  createdBy: \"Peter R.\"\n  resources:\n      - id: \"hp\"\n      name: \"human phenotype ontology\"\n      url: \"http://purl.obolibrary.org/obo/hp.owl\"\n      version: \"2018-03-08\"\n      namespacePrefix: \"HP\"\n      iriPrefix: \"hp\"\n      - id: \"geno\"\n      name: \"Genotype Ontology\"\n      url: \"http://purl.obolibrary.org/obo/geno.owl\"\n      version: \"19-03-2018\"\n      namespacePrefix: \"GENO\"\n      iriPrefix: \"geno\"\n      - id: \"pubmed\"\n      name: \"PubMed\"\n      url: \"https://www.ncbi.nlm.nih.gov/pubmed/\"\n      namespacePrefix: \"PMID\"\n  phenopacketSchemaVersion: \"2.0\"\n  externalReferences:\n      - id: \"PMID:30808312\"\n      description: \"Bao M, et al. COL6A1 mutation leading to Bethlem myopathy with recurrent hematuria: a case report. BMC Neurol. 2019;19(1):32.\"\n</code></pre>"},{"location":"ems/metadata/#explanations","title":"Explanations","text":"<ul> <li>created</li> </ul> <p>This element is a <code>ISO8601 UTC timestamp &lt;https://en.wikipedia.org/wiki/ISO_8601&gt;</code>_ for when this phenopacket was created in ISO, e.g.,  \"2018-03-01T00:00:00Z\".</p> <ul> <li>created_by</li> </ul> <p>This is a string that represents an identifier for the contributor/ program. The expected syntax and semantics are application-dependent.</p> <ul> <li>submitted_by</li> </ul> <p>This is a string that represents an identifier for the person who submitted the phenopacket (who may not be the person who created the phenopacket).</p> <ul> <li>resources</li> </ul> <p>This element contains a listing of the ontologies/resources referenced in the phenopacket.</p> <ul> <li>updates</li> </ul> <p>This element contains a list of :ref:<code>rstupdate</code> objects which contain information about when, what and who updated a phenopacket. This is only necessary when a phenopacket is being used as a persistent record and is being continuously updated. Resources should provide information about how this is being used.</p> <ul> <li>phenopacket_schema_version</li> </ul> <p>A string representing the version of the phenopacket-schema according to which a phenopacket was made. Permitted values MUST be one of <code>1.0.0</code>, <code>1.0</code> or <code>2.0</code>. Versions <code>1.0.0</code> and <code>1.0</code> are equivalent and the <code>1.0</code> string should be preferred. This version of the schema is <code>2.0</code>.</p> <ul> <li>external_references</li> </ul> <p>A list of :ref:<code>rstexternalreference</code> (such as the PubMed id of a publication from which a phenopacket was derived).</p>"},{"location":"ems/model_genotype/","title":"ModelGenotype","text":"<p>For human data, we are using the GA4GH Variation Representation Specification (VRS). However, mouse data often use symbolic representations of variants that are not immediately computable, for instance.</p> <pre><code>{\n  \"count\": 1,\n  \"komp_genotypes\": [\n    {\n      \"genesymbol\": \"Slc1a3\",\n      \"genotype_id\": 1855703,\n      \"genotypedescription\": \"Slc1a3&lt;tm1.1(KOMP)Mbp&gt; -/+\",\n      \"genotypesymbol\": \"-/+\",\n      \"jr\": 18557,\n      \"latest_pheno\": \"2013-04-05\",\n      \"strainstatus\": \"KOMP Complete\"\n    }\n  ]\n}\n</code></pre> <p>Question -- should we also support HGVS-style variants with the VRS framework?</p>"},{"location":"ems/ontologyclass/","title":"OntologyClass","text":"<p>This element is used to represent classes (terms) from ontologies, and is used in many places throughout the Phenopacket standard. It is a simple, two element message that represents the identifier and the label of an ontology class.</p>"},{"location":"ems/ontologyclass/#data-model","title":"Data model","text":"Field Type Multiplicity Description id string 1..1 a CURIE-style identifier e.g., MP:0013414. REQUIRED label string 1..1 human-readable class name e.g., decreased myeloid cell number in bone marrow. REQUIRED"},{"location":"ems/ontologyclass/#example","title":"Example","text":"<pre><code>ontologyClass:\n    id: \"MP:0013414\"\n    label: \"decreased myeloid cell number in bone marrow\"\n</code></pre>"},{"location":"ems/ontologyclass/#explanations","title":"Explanations","text":"<ul> <li>id</li> </ul> <p>The ID SHALL be a CURIE-style identifier, e.g., HP:0100024, MP:0001284, UBERON:0001690. In order that the class is resolvable, it MUST reference the namespace prefix of a :ref:<code>rstresource</code> named in the MetaData message.</p> <ul> <li>label</li> </ul> <p>The the human-readable label for the concept. This MUST match the ID in the ontology referenced by the namespace prefix in a :ref:<code>rstresource</code> named in the MetaData.</p>"},{"location":"ems/project/","title":"Project","text":"<p>A project comprises multiple studies, generally on the same topic. TODO Describe what a project is and how it relates to Study!</p>"},{"location":"ems/project/#data-model","title":"Data model","text":"Field Type Multiplicity Description id string 1..1 An arbitrary identifier for this project. REQUIRED people ?? 1..* List of people involved in the project ?? publicReleaseDate ?? Date or timestamp 0..1 The age at which the experiment was performend. RECOMMENDED publications ?? Publication object 0..* Publications that describe this project. studies List of Study objects 0..* specific studies performed for this project metadata MetaData object 0..* Ontology versions used to create the ES <p>The following is the data available in MPD for a project:</p> <pre><code>{\n  \"count\": 1,\n  \"projects\": [\n    {\n      \"ages\": \"various\",\n      \"availstat\": \"public\",\n      \"changesincereleased\": null,\n      \"corrpi\": null,\n      \"createdtime\": null,\n      \"deletedtime\": null,\n      \"external_id\": null,\n      \"instauth\": \"instauth\",\n      \"largecollab\": null,\n      \"mpdsector\": \"pheno\",\n      \"ncohorts\": null,\n      \"nstrains\": 18,\n      \"paneldesc\": \"CC\",\n      \"panelsym\": \"CC\",\n      \"participants\": null,\n      \"pistring\": \"The Jackson Laboratory\",\n      \"popcount_f\": null,\n      \"popcount_m\": null,\n      \"pophints\": null,\n      \"projid\": 519,\n      \"projsym\": \"JaxCC1\",\n      \"projyear\": \"2018\",\n      \"releasedate\": \"2019/04\",\n      \"releasedtime\": null,\n      \"rnaseq_id\": null,\n      \"seriesstub\": null,\n      \"seriestag\": null,\n      \"sexes\": \"both\",\n      \"species\": null,\n      \"status\": null,\n      \"tags\": \"\",\n      \"title\": \"Multisystem phenotyping of 18 Collaborative Cross strains\",\n      \"updatedtime\": null,\n      \"url\": null\n    }\n  ]\n}\n</code></pre>"},{"location":"ems/protocol/","title":"Protocol","text":"<p>A protocol comprises all of the steps required to perform one or multiple experimental assays. Here is an example: Diet effects on Type 2 diabetes.</p> <p>It seems that this information is currently not represented in a computable way. Need to decide how much detail we need to represent this.</p>"},{"location":"ems/researcher/","title":"Researcher","text":"<p>Information about a researcher involved in a project (MPD records this information as lists of people). Uncertain if we want to include all of this information in the EMS</p> <p>Here is an example <pre><code>\"people\":[\n    {\"address\":\"Madison, WI, USA\",\n    \"affiliation\":\"University of Wisconsin\",\n    \"comments\":[],\n    \"email\":\"attie@biochem.wisc.edu\",\n    \"fax\":\"\",\n    \"firstName\":\"Alan\",\n    \"lastName\":\"Attie\",\n    \"midInitials\":\"D\",\n    \"phone\":\"\",\n    \"roles\":[{\"@id\":\"#role/1\",\n        \"annotationValue\":\"investigator\",\n    \"comments\":[],\n    \"termAccession\":\"http://www.ebi.ac.uk/efo/EFO_0001739\",\"termSource\":\"EFO\"}]\n    }, ...\n]\n</code></pre></p>"},{"location":"ems/researcher/#data-model","title":"Data model","text":"Field Type Multiplicity Description id string 1..1 An arbitrary identifier for this researcher (??). REQUIRED firstName string 1..1 given name. REQUIRED midInitials string 0..1 Zero, one, or multiple middle initials. RECOMMENDED lastName string 1..1 surname. REQUIRED affiliation string 0..1 Should this be an object? What about people with multiple or changing affiliations, do we care? address string 0..1 Address of the affiliation comments string 0..1 free text fax string 0..1 really? email string 0..1 do we really want to store emails here? roles list of OntologyClass 0..* roles such as investigator from EFO"},{"location":"ems/strain/","title":"Strain","text":"<p>A strain can be defined as a group of organisms that belong to the same species but share certain genetic characteristics not found in other members of the species (Source: NCI).</p> <p>Mouse strain nomenclature provides two types of technical information: the background or parental strains upon which the strain is based, and details about relevant genes and alleles. The strain name can also include such information as who developed the strain, where it was developed, and where it is currently maintained (Details are available in the JAX Handbook).</p> <p>The EPS represents strain information as follows.</p>"},{"location":"ems/strain/#data-model","title":"Data model","text":"Field Type Multiplicity Description strain_type OntologyClass 1..1 ontology term representing the strain e.g., MP:0013414. REQUIRED. strain_attribute repeated StrainAttribute 0..*, attributes of the strain. OPTIONAL alternate_id_list repeated string 0..* alternate string representations of the strain identified. OPTIONAL <p>The Strain message is designed to work with an enumeration of strain attributes.</p> Entry Explanation UNKNOWN no information available INBRED_STRAIN todo CONGENIC todo MUTANT_STRAIN todo TRANSGENIC todo OUTBRED todo CRE_STRAIN todo"},{"location":"ems/strain/#examples","title":"Examples","text":"<p>The following represents the strain C57BL/A.</p> <pre><code>{\n    \"strainType\": {\n        \"id\": \"MGI:2670463\",\n        \"label\": \"C57BL/A\"\n    },\n    \"strainAttribute\": [\"INBRED_STRAIN\"]\n}\n</code></pre> <p>The following represents the strain B6.Cg-Tg(Myh6-Nox4)1Ams.</p> <pre><code>{\n    \"strainType\": {\n        \"id\": \"MGI:4839003\",\n        \"label\": \"B6.Cg-Tg(Myh6-Nox4)1Ams\"\n    },\n    \"strainAttribute\": [\"CONGENIC\", \"MUTANT_STRAIN\", \"TRANSGENIC\"]\n}\n</code></pre>"},{"location":"ems/strain/#explanations","title":"Explanations","text":"<p>TODO -- explain how to choose each of the elements of this message (write this after we have finalized the element). Also consider how this would be done for other models.</p>"},{"location":"ems/study/","title":"Study","text":"<ul> <li>Describe the factors of interest in an experiment, using ontology terms, e.f., Diet, Strain, Sex</li> <li>factorial design</li> <li>Protocols, e.g., CUBE Extended Body Weight protocol (this is a string in bioconnect, unclear what the relationship to assay is?)</li> </ul>"},{"location":"introduction/ontologies/","title":"Ontologies","text":"<p>TODO -- add texts to describe ontologies for model organisms.</p> <p>A terminology is a set of prefered or official terms in a domain. One of the  most important terminologies for information retrieval in the medical domain is the Medical Subject Headings (MeSH), which is used for indexing and searching Medline.</p> <p>Ontologies differ from terminologies in that ontologies define relationships between concepts in a way that allows computational logical reasoning. A short introduction is available in this recent <code>review &lt;https://www.ncbi.nlm.nih.gov/pubmed/30304648&gt;</code>_.</p> <p>While both terminologies and ontologies can be used, the phenopacket schema recommends the use of specific ontologies in order to maximize utility of performing algorithmic analysis over medically relevant abnormalities.</p> <p>The <code>Human Phenotype Ontology (HPO) &lt;http://www.human-phenotype-ontology.org&gt;</code>_  describes patient phenotypic features and was originally designed for genomic diagnostics, translational research, genomic matchmaking, and systems biology applications in the field of rare disease and other fields of medicine. It is increasinly used within clinical applications today for precision medicine.</p> <p>The HPO is developed in the context of the <code>Monarch Initiative &lt;https://monarchinitiative.org/&gt;</code>, an international team of computer scientists, clinicians, and biologists in the United States, Europe, and Australia; HPO is being translated into multiple languages to support international interoperability. Due to its extensive phenotypic coverage beyond other terminologies, HPO has recently been integrated into the <code>Unified Medical Language System &lt;https://www.nlm.nih.gov/research/umls/sourcereleasedocs/current/HPO/&gt;</code> (UMLS) to support deep phenotyping in a variety of mainstream health care IT systems.</p> <p>The <code>National Cancer institute's Thesaurus (NCIt) &lt;http://www.obofoundry.org/ontology/ncit.html&gt;</code>_ is used for cancer biosamples, and is the de facto standard for cancer knowledge representation and regulatory submission.</p> <p>The <code>Mondo Disease Ontology (Mondo) &lt;https://mondo.monarchinitiative.org/&gt;</code>_ is an ontology that harmonizes disease definitions and identifiers in a systematic and computational manner across many resources, and is therefore the recommneded disease ontology for use in Phenopackets to maximize interoperability.</p> <p>Other terminologies and ontologies may be used in the Phenopackets Schema, such as the International Classification of Diseases (ICD) or the Systematized Nomenclature of Medicine (SNOMED-CT), or numerous ontologies from the <code>Open Biomedical Ontologies Library (OBO) &lt;http://www.obofoundry.org/&gt;</code>_.</p>"},{"location":"introduction/protobuf/","title":"A short introduction to protobuf","text":"<p>Phenopackets schema uses protobuf, an exchange format developed in 2008 by Google. We refer readers to the excellent <code>Wikipedia page on Protobuf &lt;https://en.wikipedia.org/wiki/Protocol_Buffers&gt;</code> and to <code>Google's documentation &lt;https://developers.google.com/protocol-buffers/&gt;</code> for details. This page intends to get curious readers who are unfamiliar with protobuf up to speed with the main aspects of this technology, but it is not necessary to understand protobuf to use the phenopacket schema.</p> <p>Google initially developed Protocol Buffers (protobuf) for internal use, but now has provided a code generator for multiple languages under an open source license. In this documentation, we will demonstrate use of phenopacket-schema with Java, but all of the features are available in any of the languages that protobuf works with including C++ and Python.</p> <p>The major advantages of protobuf are that it is language-neutral, faster than many other schema languages such as XML and JSON, and can be simpler to use because of features such as automatic validation of data objects.</p> <p>Protobuf forsees that data structures (so-called messages) are defined in a definition file (with the suffix .proto) and compiled to generate code that is invoked by the sender or recipient of the data to encode/decode the data.</p>"},{"location":"introduction/protobuf/#installing-protobuf","title":"Installing protobuf","text":"<p>The following exercise is not necessary to use phenopacket-schema, but is intended to build intuition for how protobuf works. We first need to install protobuf (Note that these instructions are for this tutorial only. The maven system will automatically pull in protobuf for phenopackets schema). We show one simple way of installing protobuf on a linux system in the following.</p> <ol> <li> <p>Download the source code from the <code>protobuf GitHub page &lt;https://github.com/protocolbuffers/protobuf&gt;</code>_. Most users should download the latest tar.gz archive from the Release page. Extract the code.</p> </li> <li> <p>Install the code as follows (to do so, you will need the packages autoconf, automake, libtool, curl, make, g++, unzip).</p> </li> </ol> <p>.. code-block:: bash</p> <p>./configure    make    make check    sudo make install    sudo ldconfig # refresh shared library cache.</p> <p>You now should check if installation was successful</p> <p>.. code-block:: bash</p> <p>$ protoc --version   libprotoc 3.8.0</p> <pre><code>An example schema\n</code></pre> <p>protobuf represents data as messages whose fields are indicated and aliased with a number and tag. Fields can be required, optional, or repeated. The following message describes a dog. The name is represented as a string, and the field is indicated with the number 1. The weight of the dog is represented as an integer. The toys field can store multiple items represented as a string. Note that in protobuf3, it is not possible to define a field as required.</p> <p>.. code-block:: proto</p> <pre><code>syntax = \"proto3\";\n\nmessage dog {\n  required string name = 1;\n  int32 weight = 2;\n  repeated string toys = 4;\n  }\n</code></pre> <p>We can compile this code with the following command</p> <p>.. code-block:: bash</p> <p>$ protoc -I=. --java_out=. dog.proto</p> <p>This will generate a Java file called <code>Dog.java</code> with code to create, import, and export protobuf data. For example, the weight field is represented as follows.</p> <p>.. code-block:: java</p> <pre><code>public static final int WEIGHT_FIELD_NUMBER = 2;\nprivate int weight_;\npublic int getWeight() {\n  return weight_;\n}\n</code></pre> <p>It is highly recommended to peruse the complete Java file, but we will leave that as an exercise for the reader.</p>"},{"location":"introduction/protobuf/#using-the-generated-code","title":"Using the generated code","text":"<p>We can now easily use a generated code to create Java instance of the Dog class. We will not provide a complete maven tutorial here, but the key things that need to be done to get this to work are the following.</p> <ol> <li> <p>set up a maven-typical directory structure such as::</p> <p>src  --main  ----java  ------org  --------example  ----proto</p> </li> </ol> <p>Add the following to the dependencies</p> <p>.. code-block:: xml</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.google.protobuf&lt;/groupId&gt;\n  &lt;artifactId&gt;protobuf-java&lt;/artifactId&gt;\n  &lt;version&gt;3.5.1&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>and add the following to the plugin section</p> <p>.. code-block:: xml</p> <pre><code>&lt;plugin&gt;\n  &lt;groupId&gt;org.xolstice.maven.plugins&lt;/groupId&gt;\n  &lt;artifactId&gt;protobuf-maven-plugin&lt;/artifactId&gt;\n  &lt;version&gt;0.5.1&lt;/version&gt;\n  &lt;extensions&gt;true&lt;/extensions&gt;\n  &lt;configuration&gt;\n    &lt;protocExecutable&gt;/usr/local/bin/protoc&lt;/protocExecutable&gt;\n  &lt;/configuration&gt;\n  &lt;executions&gt;\n    &lt;execution&gt;\n      &lt;goals&gt;\n        &lt;goal&gt;compile&lt;/goal&gt;\n        &lt;goal&gt;test-compile&lt;/goal&gt;\n      &lt;/goals&gt;\n    &lt;/execution&gt;\n  &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre> <p>This is the simplest configuration of the <code>xolstice plugin &lt;https://www.xolstice.org/protobuf-maven-plugin/usage.html&gt;</code>_; see the documentation for further information. We have assumed that protoc is installed in /usr/local/bin in the above, and the path may need to be adjusted on your system.</p> <p>Add the protobuf definition to the proto directory. Add a class such as Main.java in the /src/main/java/org/example directory (package: org.example). For simplicity, the following code snippets could be written in the main method</p> <p>.. code-block:: java</p> <p>String name = \"Fido\";    int weight = 5;    String toy1=\"bone\";    String toy2=\"ball\";</p> <p>Dog.dog fido = Dog.dog.newBuilder()                 .setName(name).                 setWeight(weight).                 addToys(toy1).                 addToys(toy2).                 build();</p> <pre><code>System.out.println(fido.getName() + \"; weight: \" + fido.getWeight() + \"kg;  favorite toys: \"\n    + fido.getToysList().stream().collect(Collectors.joining(\"; \")));\n</code></pre> <p>The code can be compiled with</p> <p>.. code-block:: bash</p> <p>$ mvn clean package</p> <p>If we run the demo app, it should output the following. ::</p> <pre><code>Fido; weight: 5kg;  favorite toys: bone; ball``.\n</code></pre>"},{"location":"introduction/protobuf/#serialization","title":"Serialization","text":"<p>The following code snippet serializes the Java object fido and writes the serialized message to disk, then reads the message and displays it.</p> <p>.. code-block:: java</p> <pre><code>    try {\n        // serialize\n        String filePath=\"fido.pb\";\n        FileOutputStream fos = new FileOutputStream(filePath);\n        fido.writeTo(fos);\n        // deserialize\n        Dog.dog deserialized\n                = Dog.dog.newBuilder()\n                .mergeFrom(new FileInputStream(filePath)).build();\n\n        System.out.println(\"deserialized: \"+deserialized.getName() + \"; weight: \" + deserialized.getWeight() + \"kg;  favorite toys: \"\n                + deserialized.getToysList().stream().collect(Collectors.joining(\"; \")));\n\n    } catch (IOException ioe) {\n        ioe.printStackTrace();\n    }\n</code></pre> <p>The code should output the following. ::</p> <pre><code>deserialized: Fido; weight: 5kg;  favorite toys: bone; ball\n</code></pre> <p>We hope that this brief introduction was useful and refer to <code>Google's documentation &lt;https://developers.google.com/protocol-buffers/&gt;</code>_ for more details.</p>"}]}